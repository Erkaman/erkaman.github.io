<list>
  <project>
    <title>regl</title>
    <href>https://github.com/mikolalysenko/regl</href>
    <img>/img/gallery/regl.png</img>
    <text>
      <p>
        I am a very active contributor to the open source WebGL
        framework regl. My many contributions include: writing many
        code examples for the purpose of making the framework easier
        to learn for beginners, reporting and fixing many bugs,
        writing unit tests, writing and improving the documentation,
        and I have also written benchmarking and profiling tools for
        the framework.
      </p>
    </text>
  </project>
  <project>
    <title>regl-cnn</title>
    <href>https://github.com/Erkaman/regl-cnn</href>
    <img>/img/gallery/regl-cnn.png</img>
    <text>
      <p>
        Using the WebGL framework regl, I implemented a
        handwritten digit recognizer on the GPU. The main purpose was
        to demonstrate that regl can be used to greatly simplify GPGPU
        programming using WebGL.
      </p>
    </text>
  </project>
  <project>
    <title>wireframe-world</title>
    <href>https://github.com/Erkaman/wireframe-world</href>
    <img>/img/gallery/wireframe.png</img>
    <text>
      <p>
        A small demo that renders an infinitely scrolling world with
        WebGL. Implemented using the framework regl.
      </p>
      <p>
        The geometry and the textures of the world is entirely
        procedurally generated.
      </p>
    </text>
  </project>
  <project>
    <title>planar-reflection.js</title>
    <href>https://www.youtube.com/watch?v=FUNAcjJHo8U</href>
    <img>/img/gallery/planar-reflection.png</img>
    <text>
      <p>
        A small demo that renders reflections in a plane by using a trick
        with the stencil buffer. It was written in the WebGL framework
        regl.
      </p>
    </text>
  </project>
  <project>
    <title>deferred_shading.js</title>
    <href>https://mikolalysenko.github.io/regl/www/gallery/deferred_shading.js.html</href>
    <img>/img/gallery/deferred_shading.png</img>
    <text>
      <p>
        A simple reference implementation of deferred
        shading in WebGL. It was written in regl, and the main purpose was
        demonstrating how to use MRT in regl. Some people have told me
        that it doesn't work on their computers. Unfortunately, this
        is due to browser extension loading issues(so basically, a bug
        in the browser), and there's little
        I can do about it :-(. So it may or may not run in your browser.
      </p>
    </text>
  </project>
  <project>
    <title>cloth.js</title>
    <href>https://www.youtube.com/watch?v=scg33DHDnHc</href>
    <img>/img/gallery/cloth.png</img>
    <text>
      <p>
        A simple cloth simulation implemented in WebGL, using the
        framework regl. The simulation is based on the mass-spring
        model originally described by Thomas Jakobsen in this <a href="http://graphics.cs.cmu.edu/nsp/course/15-869/2006/papers/jakobsen.htm">article</a>.
      </p>
    </text>
  </project>
  <project>
    <title>gl-water2d</title>
    <href>https://github.com/Erkaman/gl-water2d</href>
    <img>/img/gallery/water-edit.png</img>
    <text>
      <p>
        A 2D water simulation based on Smoothed Particle Hydrodynamics
        in Javascript. It implements some of the techniques described
        in the paper <a href="http://www.ligum.umontreal.ca/Clavet-2005-PVFS/pvfs.pdf">Particle-based Viscoelastic Fluid Simulation</a>
      </p>
      <p>
        An editor for making water simulations is provided, and tools
        for recording such simulations are also provided(although they
        are a bit clunky to use, currently).
      </p>
    </text>
  </project>
  <project>
    <title>parle-cuda</title>
    <href>https://github.com/Erkaman/parle-cuda</href>
    <img>/img/gallery/parle_scatter.png</img>
    <text>
      <p>
        A reference implementation of the compression algorithm Run-Length Encoding in CUDA. You
        can read the implementation details in my <a href="/posts/cuda_rle.html">article</a>.
      </p>
    </text>
  </project>
  <project>
    <title>gl-catmull-clark</title>
    <href>https://github.com/Erkaman/gl-catmull-clark</href>
    <img>/img/gallery/subdivide.png</img>
    <text>
      <p>
        A reference implementation of <a href="https://en.wikipedia.org/wiki/Catmull%E2%80%93Clark_subdivision_surface">Catmull-Clark subdivision
        surfaces</a> in Javascript and WebGL.
      </p>
    </text>
  </project>
  <project>
    <title>tess-opt</title>
    <href>https://github.com/Erkaman/tess-opt</href>
    <img>/img/gallery/tess_opt.png</img>
    <text>
      <p>
        This small application shows how we can use tessellation
        shaders to make faster fragment shaders, using the techniques
        described by Wang et al. in their paper Automatic
        Shader Simplification using Surface Signal
        Approximation. You can more abut this in my <a
        href="/posts/tess_opt.html">article</a>.
      </p>
    </text>
  </project>
  <project>
    <title>glsl-worley</title>
    <href>https://github.com/Erkaman/glsl-worley</href>
    <img>/img/gallery/worley.png</img>
    <text>
      <p>
        A port of <a
        href="http://webstaff.itn.liu.se/~stegu/GLSL-cellular/GLSL-cellular-notes.pdf">Stephan
        Gustavson's</a> implementation of Worley noise to WebGL
        shaders. Worley noise can be used for cool many things, and one
        possible application is procedural textures.
      </p>
      <p>
        A simple demo of the technique is also provided.
      </p>
    </text>
  </project>
  <project>
    <title>gl-rock</title>
    <href>https://github.com/Erkaman/gl-rock</href>
    <img>/img/gallery/1000rocks.png</img>
    <text>
      <p>
        A simple script that implements procedural generation of rock
        meshes. The script is used to implement a demo that render
        1000 unique rocks. Included is also an editor for making your own
        procedural rocks.
      </p>
    </text>
  </project>
  <project>
    <title>pnp-gui</title>
    <href>https://github.com/Erkaman/pnp-gui</href>
    <img>/img/gallery/pnp-gui-rabbit.png</img>
    <text>
      <p>
        pnp-gui implements a minimalistic Immediate Mode GUI toolkit
        for WebGL. It is heavily inspired by <a
        href="https://github.com/ocornut/imgui">dear
        imgui</a>. The toolkit allows you to design a GUI using
        nothing but Javascript and WebGL, without having to write a
        single line of HTML code.
      </p>
        <p>
        I have used to the toolkit in several of my other projects,
        such as <a
        href="https://github.com/Erkaman/gl-water2d">gl-water2d</a>
        and <a
        href="https://github.com/Erkaman/gl-catmull-clark">gl-catmull-clark</a>.
      </p>
    </text>
  </project>
  <project>
    <title>glsl-godrays</title>
    <href>https://github.com/Erkaman/glsl-godrays</href>
    <img>/img/gallery/scattering.png</img>
    <text>
      <p>
        An implementation of a screen space-based volumetric light
        scattering effect(in other words, godrays) in Javascript and
        WebGL. It is based on the article <a
        href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch13.html">Volumetric
        Light Scattering as a Post-Process</a>.
      </p>
    </text>
  </project>
  <project>
    <title>Bloxel - Developing a voxel game engine in Java using OpenGL</title>
    <href>http://www.cse.chalmers.se/~uffe/bachelor/kandidatarbetestartpaket/Final-Voxelspel.pdf</href>
    <img>/img/gallery/03full_noise.png</img>
    <text>
      <p>
        This is my bachelor's thesis, where we developed a voxel game
        engine from scratch in Java using OpenGL. I was mostly
        responsible for implementing the rendering engine, and writing
        a relatively advanced procedural world generator using <a
        href="https://en.wikipedia.org/wiki/Perlin_noise">Perlin
        Noise</a>
      </p>
    </text>
  </project>
</list>
